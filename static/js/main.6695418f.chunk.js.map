{"version":3,"sources":["NewTodoForm.js","TodoItem.js","TodoList.js","App.js","serviceWorker.js","index.js"],"names":["NewTodoForm","props","react_default","a","createElement","onSubmit","formSubmit","htmlFor","type","id","name","value","newTodo","onChange","newTodoChange","TodoItem","todo","index","key","title","checked","done","event","toggleTodoDone","style","textDecoration","onClick","removeTodo","TodoList","todos","map","src_TodoItem","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","message","bind","assertThisInitialized","preventDefault","setState","concat","toConsumableArray","console","log","target","objectSpread","splice","_this2","className","src_NewTodoForm","allDone","src_TodoList","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6695418f.chunk.js","sourcesContent":["import React from 'react';\nconst NewTodoForm = (props) => {\n\treturn(\n\t\t<form onSubmit={props.formSubmit}>\n\t\t  <label htmlFor=\"newTodo\">New ToDo</label>\n\t\t  <input\n\t\t    type=\"text\"\n\t\t    id=\"newTodo\"\n\t\t    name=\"newTodo\"\n\t\t    value={props.newTodo}\n\t\t    onChange={props.newTodoChange} />\n\t\t  <button type=\"submit\">Add ToDo</button>\n\t\t</form>\n\t);\n}\n\nexport default NewTodoForm;\n","import React from 'react';\n\nconst TodoItem = (props) => {\n\tconst {todo, index} = props;\n\treturn(\n\t\t<li key={todo.title}>\n\t\t  <input\n\t\t    type=\"checkbox\"\n\t\t    checked={todo.done}\n\t\t    onChange={(event) => props.toggleTodoDone(event, index)} />\n\t\t  <span style={{ textDecoration: todo.done ? 'line-through' : 'inherit' }}>\n\t\t    {todo.title}\n\t\t  </span>\n\t\t  <button onClick={() => props.removeTodo(index)} >Remove</button>\n\t\t</li>\n\t);\n}\n\nexport default TodoItem;\n","import React from 'react';\nimport TodoItem from './TodoItem';\n\nconst TodoList = (props) => {\n\treturn(\n\t\t<ul>\n\t\t  {props.todos.map((todo, index) => {\n\t\t    return (\n\t\t      <TodoItem\n\t\t      \tkey={index}\n\t\t      \tindex={index}\n\t\t      \ttodo={todo}\n\t\t      \ttoggleTodoDone={props.toggleTodoDone}\n\t\t      \tremoveTodo={props.removeTodo} />\n\t\t    );\n\t\t  })}\n\t\t</ul>\n\t);\n}\n\nexport default TodoList;\n","import React, { Component } from 'react';\nimport './App.css';\nimport NewTodoForm from './NewTodoForm';\nimport TodoList from './TodoList';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      message: \"Jose Vega's ToDo\",\n      newTodo: '',\n      todos: [],\n    };\n    this.formSubmit = this.formSubmit.bind(this);\n  }\n\n  formSubmit(event) {\n    event.preventDefault();\n    // console.log(this.state.newTodo);\n    this.setState({\n      newTodo: '',\n      todos: [...this.state.todos, {\n        title: this.state.newTodo,\n        done: false\n      }]\n    });\n  }\n\n  newTodoChange(event) {\n    console.log(event.target.value);\n    this.setState({\n      newTodo: event.target.value\n    });\n  }\n\n  toggleTodoDone(event, index) {\n    const todos = [...this.state.todos];\n    todos[index] = {...todos[index]};\n    todos[index].done = event.target.checked;\n\n    this.setState({\n      todos\n    });\n  }\n\n  removeTodo(index) {\n    const todos = [...this.state.todos]\n    todos.splice(index, 1);\n\n    this.setState({\n      todos\n    });\n  }\n\n  allDone() {\n    const todos = this.state.todos.map((todo) => {\n      return {\n        // ...todo, use this or\n        title: todo.title,\n        done: true\n      };\n    });\n\n    this.setState({\n      todos\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h3>{this.state.message}!!</h3>\n        <NewTodoForm\n          formSubmit={this.formSubmit.bind(this)}\n          newTodoChange={this.newTodoChange.bind(this)}\n          newTodo={this.state.newTodo} />\n        <button\n          onClick={() => this.allDone()}\n          className=\"allDone\">All Done</button>\n        <TodoList\n          todos={this.state.todos}\n          toggleTodoDone={this.toggleTodoDone.bind(this)}\n          removeTodo={this.removeTodo.bind(this)} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}